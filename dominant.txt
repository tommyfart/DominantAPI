local dominant = {}
local attached = false
local gui = game:GetService("StarterGui")

local function notify(title, text, icon)
	gui:SetCore("SendNotification", {
		Title = title,
		Text = text:lower(),
		Icon = icon and "rbxthumb://type=Asset&id=" .. icon .. "&w=150&h=150" or "",
		Duration = 5
	})
end

function dominant.Attach()
	if attached then return end

	print("[dominant] setting up api.")
	wait(0.25)
	print("[dominant] loading lua env.")
	wait(0.2)
	print("[dominant] âœ… lua env loaded.")
	wait(0.2)
	print("[dominant] ðŸ”— attached.")

	attached = true
	notify("dominant api", "attached!", 93056498699304)
end

function dominant._check()
	if not attached then
		notify("dominant api", "dominant hasn't been attached.", 93056498699304)
		return false
	end
	return true
end

function dominant.Exec(mode, input)
	if not dominant._check() then return end

	local source

	if mode == 1 and typeof(input) == "Instance" and input:IsA("TextBox") then
		source = input.Text
	elseif mode == 2 then
		if getclipboard then
			source = getclipboard()
		else
			notify("dominant api", "clipboard not supported.", 93056498699304)
			return
		end
	else
		notify("dominant api", "invalid mode.", 93056498699304)
		return
	end

	local func, err = loadstring(source)
	if not func then
		notify("dominant api", "compile error: " .. err, 93056498699304)
		return
	end

	local success, result = pcall(func)
	if success then
		notify("dominant api", "executed script!", 93056498699304)
	else
		notify("dominant api", "runtime error: " .. tostring(result), 93056498699304)
	end
end

function dominant.Clr(input)
	if not dominant._check() then return end

	if typeof(input) == "Instance" and input:IsA("TextBox") then
		input.Text = ""
		notify("dominant api", "textbox cleared.", 93056498699304)
	else
		notify("dominant api", "invalid textbox.", 93056498699304)
	end
end

function dominant.New(folderName)
	if type(folderName) ~= "string" then
		notify("dominant api", "invalid folder name.", 93056498699304)
		return
	end
	if not pcall(function() makefolder(folderName) end) then
		notify("dominant api", "failed to create folder.", 93056498699304)
		return
	end
	notify("dominant api", "folder created: " .. folderName, 93056498699304)
end

function dominant.Save(folderName, textbox)
	if not dominant._check() then return end
	if typeof(textbox) ~= "Instance" or not textbox:IsA("TextBox") then
		notify("dominant api", "invalid textbox.", 93056498699304)
		return
	end
	local folderPath = folderName
	if not pcall(function() makefolder(folderPath) end) then
		notify("dominant api", "failed to create folder.", 93056498699304)
		return
	end
	local fileName = "script_" .. tostring(os.time()) .. ".txt"
	local fullPath = folderPath .. "/" .. fileName
	if not pcall(function() writefile(fullPath, textbox.Text) end) then
		notify("dominant api", "failed to save file.", 93056498699304)
		return
	end
	notify("dominant api", "saved script as " .. fileName, 93056498699304)
end

function dominant.File(folderName, textbox)
	if not dominant._check() then return end
	if typeof(textbox) ~= "Instance" or not textbox:IsA("TextBox") then
		notify("dominant api", "invalid textbox.", 93056498699304)
		return
	end
	local folderPath = folderName
	local files
	local success, err = pcall(function()
		files = listfiles(folderPath)
	end)
	if not success or not files then
		notify("dominant api", "failed to list files.", 93056498699304)
		return
	end

	local player = game.Players.LocalPlayer
	if not player then
		notify("dominant api", "localplayer not found.", 93056498699304)
		return
	end

	local screenGui = Instance.new("ScreenGui")
	screenGui.Name = "DominantFilePicker"
	screenGui.ResetOnSpawn = false
	screenGui.Parent = player:WaitForChild("PlayerGui")

	local frame = Instance.new("Frame")
	frame.Size = UDim2.new(0, 300, 0, 400)
	frame.Position = UDim2.new(0.5, -150, 0.5, -200)
	frame.BackgroundColor3 = Color3.fromRGB(30,30,30)
	frame.Parent = screenGui

	local title = Instance.new("TextLabel")
	title.Size = UDim2.new(1, 0, 0, 30)
	title.BackgroundTransparency = 1
	title.Text = "select a script to load"
	title.TextColor3 = Color3.new(1,1,1)
	title.Font = Enum.Font.SourceSansBold
	title.TextSize = 20
	title.Parent = frame

	local UIListLayout = Instance.new("UIListLayout")
	UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	UIListLayout.Padding = UDim.new(0, 5)
	UIListLayout.Parent = frame

	for _, filePath in ipairs(files) do
		local fileName = filePath:match("[^/\\]+$")
		local button = Instance.new("TextButton")
		button.Size = UDim2.new(1, -10, 0, 30)
		button.BackgroundColor3 = Color3.fromRGB(50,50,50)
		button.TextColor3 = Color3.new(1,1,1)
		button.Font = Enum.Font.SourceSans
		button.TextSize = 18
		button.Text = fileName
		button.Parent = frame

		button.MouseButton1Click:Connect(function()
			local content
			local ok, e = pcall(function()
				content = readfile(filePath)
			end)
			if ok and content then
				textbox.Text = content
				notify("dominant api", "loaded: " .. fileName, 93056498699304)
				screenGui:Destroy()
			else
				notify("dominant api", "failed to read file.", 93056498699304)
			end
		end)
	end

	local closeBtn = Instance.new("TextButton")
	closeBtn.Size = UDim2.new(1, -10, 0, 30)
	closeBtn.Position = UDim2.new(0, 0, 1, -35)
	closeBtn.BackgroundColor3 = Color3.fromRGB(80,20,20)
	closeBtn.TextColor3 = Color3.new(1,1,1)
	closeBtn.Font = Enum.Font.SourceSansBold
	closeBtn.TextSize = 18
	closeBtn.Text = "close"
	closeBtn.Parent = frame
	closeBtn.MouseButton1Click:Connect(function()
		screenGui:Destroy()
	end)
end

function dominant.Load()
	notify("dominant api", "dominant api has loaded!", 93056498699304)
end

return dominant
